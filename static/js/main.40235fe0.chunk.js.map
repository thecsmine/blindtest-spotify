{"version":3,"sources":["logo.svg","loading.svg","Button.js","AlbumCover.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","AlbumCover","React","useState","previewUrl","setPreviewUrl","shouldPlay","setShouldPlay","useEffect","track","console","log","preview_url","className","src","album","images","url","alt","style","width","height","transition","playStatus","Sound","status","PLAYING","shuffleArray","array","counter","length","index","x","Math","floor","random","temp","App","tracks","setTracks","invalidAPI","setInvalidAPI","songsLoaded","setSongsLoaded","fetch","method","headers","Authorization","then","response","json","data","items","currentTrack","useMemo","logo","loading","slice","map","item","key","name","checkAnswer","Swal","fire","title","text","type","confirmButtonText","confirmButtonColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.40235fe0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport Sound from \"react-sound\";\nimport Button from \"./Button\";\n\nconst AlbumCover = (props) => {\n  const [previewUrl, setPreviewUrl] = React.useState(\"\");\n  const [shouldPlay, setShouldPlay] = React.useState(false);\n\n  React.useEffect(() => {\n    if (props.track !== null) {\n      console.log(props.track.preview_url);\n      setPreviewUrl(props.track.preview_url);\n    }\n  }, [props]);\n\n  return props.track !== null ? (\n    <>\n      <div className=\"cover\">\n        <img\n          src={props.track.album.images[0].url}\n          alt=\"track image\"\n          style={{ width: 300, height: 300 }}\n        />\n        <Button onClick={() => setShouldPlay(!shouldPlay)}>\n          {shouldPlay ? \"Pause\" : \"Play\"}\n        </Button>\n      </div>\n      <div className=\"progress-bar\">\n        <div\n          style={\n            shouldPlay\n              ? {\n                  width: \"100%\",\n                  transition: \"width linear 30s\",\n                }\n              : { width: \"0%\", transition: \"width 0s\" }\n          }\n        ></div>\n      </div>\n      {shouldPlay ? (\n        <>\n          <Sound url={previewUrl} playStatus={Sound.status.PLAYING} />\n        </>\n      ) : null}\n    </>\n  ) : null;\n};\n\nexport default AlbumCover;\n","/*global swal*/\n\nimport React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport loading from \"./loading.svg\";\nimport \"./App.css\";\nimport Sound from \"react-sound\";\nimport Button from \"./Button\";\nimport AlbumCover from \"./AlbumCover\";\nimport Swal from \"sweetalert2\";\n\nconst apiToken =\n  \"BQClQjtsZ-fiKKd3C3WfUUvay2iD0UuJaWejHjhRn8C3cc85p1KW3qISqCAb51YRstqZ0MyHogp03EwHlh95z3BC7WduSj-_npUOJlPJ8wqkoDUxGj3GZ78LI8-fjFBEoSSLd5eax2p8SkIt-dAnJoEP3bMa7WQyTyR-eiF4Mcqnb5f4nocIrWHbbA\";\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nconst App = () => {\n  const [tracks, setTracks] = React.useState([]);\n  const [invalidAPI, setInvalidAPI] = React.useState(false);\n  const [songsLoaded, setSongsLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    fetch(\"https://api.spotify.com/v1/me/tracks\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + apiToken,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (\"error\" in data) {\n          setInvalidAPI(true);\n          return;\n        }\n        console.log(\"RÃ©ponse reÃ§ue ! VoilÃ  ce que j'ai reÃ§u : \", data);\n        setSongsLoaded(true);\n        setTracks(shuffleArray(data.items));\n      });\n  }, []);\n\n  const checkAnswer = (name) => {\n    if (currentTrack.name === name) {\n      Swal.fire({\n        title: \"Bravo ðŸ¥³\",\n        text: \"Vous avez devinÃ© la bonne musique :)\",\n        type: \"success\",\n        confirmButtonText: \"Continue playing\",\n        confirmButtonColor: \"#33cc33\",\n      }).then(() => {\n        setTracks(shuffleArray([...tracks]));\n      });\n    } else {\n      Swal.fire({\n        title: \"Dommage ðŸ˜¥\",\n        text: \"Vous n'avez pas devinÃ© la bonne musique :(\",\n        type: \"warning\",\n        confirmButtonText: \"Try again\",\n        confirmButtonColor: \"#cc3333\",\n      });\n    }\n  };\n\n  const currentTrack = React.useMemo(() => {\n    if (tracks && tracks.length > 0) return tracks[0].track;\n    return null;\n  }, [tracks]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n      </header>\n      <div className=\"App-images\">\n        {songsLoaded ? (\n          <AlbumCover track={currentTrack} />\n        ) : invalidAPI ? (\n          <p>API Token is invalid.</p>\n        ) : (\n          <img src={loading} className=\"loading\" alt=\"loading\" />\n        )}\n      </div>\n      <div className=\"App-buttons\">\n        {shuffleArray(tracks.slice(0, 3)).map((item, index) => {\n          if (index < 3) {\n            return (\n              <Button\n                key={item.track.name}\n                onClick={() => checkAnswer(item.track.name)}\n              >\n                {item.track.name}\n              </Button>\n            );\n          } else {\n            return null;\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}